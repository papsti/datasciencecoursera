p + geom_line()
p + geom_line("lm")
p + geom_line(aes(method="lm"))
## fit linear regression
library(mtcars)
## fit linear regression
data(mtcars)
mtcars
fit <- lm(mpg ~ wt, data = mtcars)
summary(fit)
mwt <- mean(mtcars$wt)
fit_coef <- summary(fit)$coefficients
fit_coef
p <- ggplot(data=mtcars, aes(x = wt, y = mpg)) +
geom_point()
p
p <- ggplot(data=mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_line(stat = "lm")
p <- ggplot(data=mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_line(mapping = "lm")
p <- ggplot(data=mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_line(fit)
p <- ggplot(data=mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method='lm')
p
predict(fit, newdata = mwt, interval = ("prediction"))
## 3. fit linear regression
data(mtcars)
fit <- lm(mpg ~ wt, data = mtcars)
mwt <- mean(mtcars$wt)
predict(fit, newdata = mwt, interval = ("prediction"))
## 3. fit linear regression
data(mtcars)
fit <- lm(mpg ~ wt, data = mtcars)
mwt <- mean(mtcars$wt)
mwt
predict(fit, newdata = mwt, interval = ("prediction"))
summary(fit)
predict(fit, interval = ("prediction"))
predict(fit, newdata = mwt, interval = ("prediction"))
predict(fit, newdata = mean(mtcars$wt), interval = ("prediction"))
summary(fit)
predict(fit, newdata = c(mean(mtcars$wt)), interval = ("prediction"))
predict(fit, newdata = c(wt = mwt), interval = ("prediction"))
c(wt = mwt)
predict(fit, newdata = data.frame(wt = mwt),
interval = ("prediction"))
pred <- predict(fit, newdata = data.frame(wt = mwt),
interval = ("prediction"))
pred
pred <- predict(fit, interval = ("prediction"))
p <- ggplot(data=mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method='lm') +
geom_ribbon(data = pred, aes(ymin = lwr, ymax = upr,
fill = interval),
alpha = 0.2)
p
p <- ggplot(data=mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method='lm') +
geom_ribbon(data = data.frame(pred),
aes(ymin = lwr, ymax = upr,
fill = interval),
alpha = 0.2)
p
p <- ggplot(data=mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method='lm') +
geom_ribbon(data = data.frame(pred),
aes(ymin = lwr, ymax = upr),
alpha = 0.2)
p
predict(fit, newdata = data.frame(wt = mwt),
interval = ("prediction"))
summary(fit)
predict(fit, newdata = data.frame(wt = mwt),
interval = ("confidence"))
## 5. prediction interval from linear regression
predict(fit, newdata = data.frame(wt = 3),
interval = ("prediction"))
## 5. prediction interval from linear regression
predict(fit, newdata = data.frame(wt = 3),
interval = ("prediction"))$ups
## 5. prediction interval from linear regression
predict(fit, newdata = data.frame(wt = 3),
interval = ("prediction"))$upr
pred <- predict(fit, newdata = data.frame(wt = mwt),
interval = ("confidence"))
pred
typeof(pred)
pred[,"upr"]
pred[,"lwr"]
pred[,"upr"]
## 5. prediction interval from linear regression
pred <- predict(fit, newdata = data.frame(wt = 3),
interval = ("prediction"))
pred[,"upr"]
## 6. scaling linear regression model
fit <- lm(mpg ~ wt/2, data = mtcars)
## 6. scaling linear regression model
fit <- lm(mpg ~ I(wt/2), data = mtcars)
summary(fit)
summary(fit)$coefficients
fit$coefficients
## 6. scaling linear regression model
fit <- lm(mpg ~ I(wt/2), data = mtcars)
fit_coef <- summary(fit)$coefficients
lwr <- fit_coef[2,1] - qt(.975, df = fit$df) * fit_coef[2,2]
lwr
fit <- lm(mpg ~ wt, data = mtcars)
summary(fit)
se <- summary(fit)$coefficients
se
typeof(se)
se <- summary(fit)$coefficients[,"Std. Error"]
se
r_se <- se[2]/se[1]
r_se
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
summary(fit)[2,"Pr(>|t|)"]
summary(fit)$coef[2,"Pr(>|t|)"]
## 2. estimate residual standard error from linear regression
summary(fit)$sigma
## ALT SOL
fit <- lm(mpg ~ I(wt - mean(wt)), data = mtcars)
confint(fit)
## 5. prediction interval from linear regression
fit <- lm(mpg ~ wt, data = mtcars)
pred <- predict(fit, newdata = data.frame(wt = 3),
interval = ("prediction"))
pred[,"upr"]
confint(fit)
## ALT SOL
fit <- lm(mpg ~ wt, data = mtcars)
confint(fit)
confint(fit)[2,]*2
fit <- lm(mpg ~ wt, data = mtcars)
se <- summary(fit)$coefficients[,"Std. Error"]
r_se <- se[2]/se[1]
r_se
fit1 <- lm(mpg ~ wt, data = mtcars)
fit2 <- lm(mpg ~ 1, data = mtcars)
summary(fit2)
summary(fit1)
sse1 <- sum((predict(fit1)-mtcars$mpg)^2)
sse2 <- sum((predict(fit2)-mtcars$mpg)^2)
sse1/sse2
library(nycflights13)
library(tidyverse)
?flights
head(flights)
filter(flights, arr_delay >= 120)
filter(flights, dest %in% c("IAH", "HOU"))
head(flights$carrier)
levels(flights$carrier)
unique(flights$carrier)
filter(flights, carrier %in% c("UA", "AA", "DL"))
filter(flights, month %in% c(7,8,9))
filter(flights, arr_delay > 120 & dep_delay<=0)
filter(flights, dep_delay >=60, arr_delay <=30)
unique(flights$dep_time)
min(flights$dep_time)
max(flights$dep_time)
typeof(flights$dep_time)
filter(flights, dep_time>=0 & dep_time<=600)
airlines
nycflights13
library(swirl)
swirl()
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays, 15)
sB
summary(InsectSprays[,2])
sapply(InsectSprays, class)
fit <- lm(y ~ x, InsectSprays)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(InsectSprays$count[InsectSprays$spray=='A'])
mean(sA$count)
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)%coef()
summary(fit2)$coef
mean(sC)
(fit$coef[3]-fit$coef[2])/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(Numerics ~ Year, hunger[hunger$sex=='Female'])
lmF <- lm(Numerics ~ Year, hunger[hunger$sex=='Female',])
hunger[hunger$sex=='Female',]
hunger[hunger$sex=="Female",]
lmF <- lm(Numerics ~ Year, hunger[hunger$Sex=='Female',])
hunger[hunger$Sex=="Female"]
hunger[hunger$Sex=="Female",]
lmF <- lm(Numeric ~ Year, hunger[hunger$Sex=="Female",])
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunter)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which=1)
coef(fitno)-coef(fit)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1,"y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(deviance(fit)/fit$df.residual)
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma <- sqrt(deviance(fitno)/df.residual(fitno))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which = 5)
library('mtcars')
data(mrcars)
data(mtcars)
typeof(mtcars$cyl)
head(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
typeof(mtcars$cyl)
lm(mpg ~ cyl + wt, data = mtcars)
fit_cyl_wt <- lm(mpg ~ cyl + wt, data = mtcars)
fit_cyl <- lm(mpg ~ cyl, data = mtcars)
fit_cyl_wt$coefficients
fit_cyl$coefficients
fit_cyl_wt_inter <- lm(mpg ~ cyl + wt + cyl*wt, data = mtcars)
lrtest(fit_cyl_wt_inter, fit_cyl_wt)
library(lmtest)
lrtest(fit_cyl_wt_inter, fit_cyl_wt)
lrtest(fit_cyl_wt, fit_cyl_wt_inter)
fit_half_wt <- lm(mpg = I(wt * 0.5) + cyl, data = mtcars)
fit_half_wt <- lm(mpg ~ I(wt * 0.5) + cyl, data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
hatvalues(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
dfbeta(fit)
hatvalues(fit)
?hatvalues
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~x)
hatvalues(fit)
dfbeta(fit)
plot(x,y)
fit2 <- lm(y[1:4],x[1:4])
fit2 <- lm(y[1:4] ~ x[1:4])
fit$ceof
fit$coef
fit2$coefficients
1.0601519-0.1288595
1-0.9312924179
x
y
fit <- lm(y ~ x -1)
hatvalues(fit)
dfbeta(fit)
1-9.258006e-01
fit <- lm(x ~ y)
hatvalues(fit)
dfbeta(fit)
1/4.76403334
fit <- lm(y ~ x)
dfbeta(fit)
1/-0.9312924179
hatvalues(fit)
influence.measures(fit)
dfbeta(fit)
install.packages("devtools")
library(collegeIncome)
data(college)
devtools::install_github("jhudsl/matahari")
library(matahari)
setwd("~/git-repos/datasciencecoursera/course7-regressionmodels/proj")
system("open -a Skim.app proj.pdf")
## Set knitr options
knitr::opts_chunk$set(echo = FALSE, cache = TRUE, fig.width = 5, fig.height = 4)
## Load libraries
library(tidyverse)
library(reshape2)
print('Correlation between fuel efficiency (mpg) and other variables:')
sort(corr_mat['mpg',])
## Set knitr options
knitr::opts_chunk$set(echo = FALSE, cache = TRUE, fig.width = 5, fig.height = 4)
## Load libraries
library(tidyverse)
library(reshape2)
## Convert data to tibble and make factor variables where helpful
mtcars <- mtcars %>%
as_tibble()
mtcars$am <- as.factor(mtcars$am)
## Count number of cars in each category of auto or manual
sample_sizes <- mtcars %>%
count(am)
auto_n <- filter(sample_sizes, am==0)$n
man_n <- filter(sample_sizes, am==1)$n
##
boxplot <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) +
geom_boxplot() +
scale_x_discrete("Transmission type",
labels = c("0" = "Automatic", "1" = "Manual")) +
ylab("Fuel efficiency (miles per gallon)")
print(boxplot)
## Compute the correlation matrix
mtcars$am <- as.numeric(as.character(mtcars$am))
# convert am column back to numeric
corr_mat <- cor(mtcars)
## Melt correlation matrix to plot
melt_corr_mat <- melt(corr_mat)
## Plot heatmap
corr_heatmap <- ggplot(filter(melt_corr_mat, Var1 == "mpg"),
aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_fill_gradientn(breaks = c(-1,0,1),
colours = c('hotpink1', 'grey80',
'forestgreen'),
labels = c(-1,0,1)) +
labs(x = 'Fuel efficiency',
y = 'Covariates',
fill = 'Correlation')
print(corr_heatmap)
print('Correlation between fuel efficiency (mpg) and other variables:')
sort(corr_mat['mpg',])
## Fit series of nested models
fit1 <- lm(mpg ~ am, data = mtcars)
fit2 <- lm(mpg ~ am + wt, data = mtcars)
fit3 <- lm(mpg ~ am + wt + cyl, data = mtcars)
fit4 <- lm(mpg ~ am + wt + cyl + disp, data = mtcars)
fit5 <- lm(mpg ~ am + wt + cyl + disp + hp, data = mtcars)
par(mfrow = c(3, 2), mar = c(4, 4, 4, 2))
plot(fit1, which = 2, main = 'mpg ~ am')
plot(fit2, which = 2, main = 'mpg ~ am + wt')
plot(fit3, which = 2, main = 'mpg ~ am + wt + cyl')
plot(fit4, which = 2, main = 'mpg ~ am + wt + cyl + disp')
plot(fit5, which = 2, main = 'mpg ~ am + wt + cyl + disp + hp')
fit_anova <- anova(fit1, fit2, fit3, fit4, fit5)
print(fit_anova)
typeof(fit_anova)
fit_anova
fit_anova[[1]]
fit_anova[[2]]
fit_anova[["Pr(>F)"]]
anova_fit <- anova(fit1, fit2, fit3, fit4, fit5)
anova_pvals <- anova_fit[["Pr(>F)"]]
anova_pvals[1]
anova_pvals[3]
print(anova_fit)
str(anova_fit)
anova_pvals <- anova_fit$Pr(>F)
str(fit1)
eval(model$call[[2]])
eval(fit1$call[[2]])
fit1$call[[2]]
as.character(fit1$call[[2]])
as.character(eval(fit1$call[[2]]))
typeof(eval(fit1$call[[2]]))
formula(fit1)
typeof(formulat(fit1))
typeof(formula(fit1))
as.character(formula(fit1))
expr(formula(fit1))
expr(eval(formula(fit1)))
library(formula.tools)
install.packages("formula.tools")
library(formula.tools)
get(paste0('fit',as.character(1)))
qqplot <- function(x){plot(get(paste0('fit', as.character(x))),
which = 2,
main = as.character(formula(
get(paste0('fit', as.character(x))))),
caption = "")}
qqplot(1)
qqplot(2)
qqplot(4)
plot(get(paste0('fit', as.character(x))),
which = 2,
main = as.character(
formula(get(paste0('fit', as.character(x))))
),
caption = "")}
my_qqplot <- function(x){
plot(get(paste0('fit', as.character(x))),
which = 2,
main = as.character(
formula(get(paste0('fit', as.character(x))))
),
caption = "")}
lapply(1:5, my_qqplot)
map(1:5, my_qqplot)
my_qqplot(1)
print(map(1:5, my_plot))
print(map(1:5, my_qqplot))
qqplot_list <- lapply(1:5, my_qqplot)
typeof(qqplot_list)
qqplot_list[[1]]
return(p)
my_qqplot <- function(x){
p <-   plot(get(paste0('fit', as.character(x))),
which = 2,
main = as.character(
formula(get(paste0('fit', as.character(x))))
),
caption = "")
return(p)
}
qqplot_list <- lapply(1:5, my_qqplot)
qqplot_list[[1]]
resid(fit1)
rstandard(fit1)
## Function to compute means of standardized residuals
mean_std_resid <- function(x){
model <- paste0("fit", x)
the_mean <- mean(rstandard(model))
print(paste0(as.character(formula(get(model)))), "mean : ",
as.character(the_mean))
}
mean_std_resid(1)
the_mean <- mean(rstandard(get(model)))
## Function to compute means of standardized residuals
mean_std_resid <- function(x){
model <- paste0("fit", x)
the_mean <- mean(rstandard(get(model)))
print(paste0(as.character(formula(get(model)))), "mean : ",
as.character(the_mean))
}
mean_std_resid(1)
x <1
x <- 1
model <- paste0("fit", x)
model
the_mean <- mean(rstandard(get(model)))
the_mean
paste0(as.character(formula(get(model)))), "mean : ",
as.character(the_mean)
paste0(as.character(formula(get(model)))), "mean : ", as.character(the_mean)
## Function to compute means of standardized residuals
mean_std_resid <- function(x){
model <- paste0("fit", x)
the_mean <- mean(rstandard(get(model)))
print(paste0(as.character(formula(get(model))), "mean : ",
as.character(the_mean)))
}
mean_std_resid(1)
## Function to compute means of standardized residuals
mean_std_resid <- function(x){
model <- paste0("fit", x)
the_mean <- mean(rstandard(get(model)))
print(paste0(as.character(formula(get(model))), " mean: ",
as.character(the_mean)))
}
print("Means of standardized residuals for each model")
print("==============================================")
mean_std_resid(1)
coef(fit3)
confint(fit3)
confint(fit3)["am",]
coef(fit3)
confint(fit3)
coef(fit3)
confints["am", "2.5 %"]
confints <- confint(fit3)
confints["am", "2.5 %"]
coefs <- coef(fit3)
coefs
coefs[, 'am']
coefs['am']
coefs$am
colnames(confints) <- c("lower", "upper")
confints
source('~/.active-rstudio-document', echo=TRUE)
confint_string <- paste0('[', confints["am", "2.5 %"], ', ' confints["am", "97.5 %"], ']')
lower <- confints["am", "2.5 %"]
confints <- confint(fit3)
lower <- confints["am", "2.5 %"]
lower
typeof(lower)
lower <- as.character(confints["am", "2.5 %"])
upper <- as.character(confints["am", "97.5 %"])
confint_string <- paste0('[', lower, ', ' upper, ']')
