size = cex,
shape = 15) +
## intermediate and death folds
geom_point(aes(x = R0, y = p + 0.05,
colour = as.numeric(as.character(period))),
data = filter(bifs,
(bif_type == "fold" & bif_pos != "birth")),
size = cex,
shape = 1) +
## birth folds
geom_point(aes(x = R0, y = p + 0.05,
colour = as.numeric(as.character(period))),
data = filter(bifs,
(bif_type == "fold" & bif_pos == "birth")),
size = cex,
shape = 16) +
geom_vline(aes(xintercept = R0,
colour = as.numeric(as.character(period))),
data = filter(bifs,
(bif_pos == "birth" & p == -1)),
size = 0.25)
print(full_plot)
## Generate tidy data
data <- make_tidy_data(branch_num)
branch_num <-1
xlim <- c(0,30)
## Generate tidy data
data <- make_tidy_data(branch_num)
## Tile plot of raw data (no contours)
pvals <- unique(data$p)
scale_colour_max <- round(quantile(data$t_per, 0.95, na.rm = TRUE),
0)
contour_plot <- ggplot(data, aes(x = R0, y = p,
col = t_per, fill = t_per)) +
geom_tile(width = 0.05) +
scale_colour_gradientn(colours = c(1:7, "grey"),
name = "Period",
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max))) +
scale_fill_gradientn(colours = c(1:7, "grey"),
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max))) +
scale_y_continuous(breaks = pvals) +
ggtitle(paste0("Transient periods for branch ", branch_num)) +
xlab("Basic Reproduction Number, $\\mathcal{R}_0$") +
ylab("Shape Parameter, $p$") +
xlim(xlim)
print(contour_plot)
contour_plot <- ggplot(data, aes(x = R0, y = p,
col = t_per, fill = t_per)) +
geom_tile(width = 0.1) +
scale_colour_gradientn(colours = c(1:7, "grey"),
name = "Period",
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max))) +
scale_fill_gradientn(colours = c(1:7, "grey"),
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max))) +
scale_y_continuous(breaks = pvals) +
ggtitle(paste0("Transient periods for branch ", branch_num)) +
xlab("Basic Reproduction Number, $\\mathcal{R}_0$") +
ylab("Shape Parameter, $p$") +
xlim(xlim)
print(contour_plot)
contour_plot <- ggplot(data, aes(x = R0, y = p,
col = t_per, fill = t_per)) +
geom_tile(width = 0.13) +
scale_colour_gradientn(colours = c(1:7, "grey"),
name = "Period",
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max))) +
scale_fill_gradientn(colours = c(1:7, "grey"),
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max))) +
scale_y_continuous(breaks = pvals) +
ggtitle(paste0("Transient periods for branch ", branch_num)) +
xlab("Basic Reproduction Number, $\\mathcal{R}_0$") +
ylab("Shape Parameter, $p$") +
xlim(xlim)
print(contour_plot)
contour_plot <- ggplot(data, aes(x = R0, y = p,
col = t_per, fill = t_per)) +
geom_tile(width = 0.1) +
scale_colour_gradientn(colours = c(1:7, "grey"),
name = "Period",
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max))) +
scale_fill_gradientn(colours = c(1:7, "grey"),
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max))) +
scale_y_continuous(breaks = pvals) +
ggtitle(paste0("Transient periods for branch ", branch_num)) +
xlab("Basic Reproduction Number, $\\mathcal{R}_0$") +
ylab("Shape Parameter, $p$") +
xlim(xlim)
print(contour_plot)
contour_plot <- ggplot(data, aes(x = R0, y = p,
col = t_per, fill = t_per)) +
geom_tile(width = 0.1) +
scale_colour_gradientn(colours = c(1:7, "grey"),
name = "Period",
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max))) +
scale_fill_gradientn(colours = c(1:7, "grey"),
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max)),
guide = FALSE) +
scale_y_continuous(breaks = pvals) +
ggtitle(paste0("Transient periods for branch ", branch_num)) +
xlab("Basic Reproduction Number, $\\mathcal{R}_0$") +
ylab("Shape Parameter, $p$") +
xlim(xlim)
contour_plot <- ggplot(data, aes(x = R0, y = p,
col = t_per, fill = t_per)) +
geom_tile(width = 0.13) +
scale_colour_gradientn(colours = c(1:7, "grey"),
name = "Period",
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max))) +
scale_fill_gradientn(colours = c(1:7, "grey"),
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max)),
guide = FALSE) +
scale_y_continuous(breaks = pvals) +
ggtitle(paste0("Transient periods for branch ", branch_num)) +
xlab("Basic Reproduction Number, $\\mathcal{R}_0$") +
ylab("Shape Parameter, $p$") +
xlim(xlim)
print(contour_plot)
contour_plot <- ggplot(data, aes(x = R0, y = p,
col = t_per, fill = t_per)) +
geom_tile(width = 0.13) +
scale_colour_gradientn(colours = c(1:7, "grey"),
name = "Period",
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max)),
alpha = 0.2) +
scale_fill_gradientn(colours = c(1:7, "grey"),
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max)),
alpha = 0.2,
guide = FALSE) +
scale_y_continuous(breaks = pvals) +
ggtitle(paste0("Transient periods for branch ", branch_num)) +
xlab("Basic Reproduction Number, $\\mathcal{R}_0$") +
ylab("Shape Parameter, $p$") +
xlim(xlim)
contour_plot <- ggplot(data, aes(x = R0, y = p,
col = t_per, fill = t_per),
alpha = 0.2) +
geom_tile(width = 0.13) +
scale_colour_gradientn(colours = c(1:7, "grey"),
name = "Period",
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max))) +
scale_fill_gradientn(colours = c(1:7, "grey"),
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max)),
guide = FALSE) +
scale_y_continuous(breaks = pvals) +
ggtitle(paste0("Transient periods for branch ", branch_num)) +
xlab("Basic Reproduction Number, $\\mathcal{R}_0$") +
ylab("Shape Parameter, $p$") +
xlim(xlim)
print(contour_plot)
full_plot <- contour_plot +
## all points on grey background
geom_point(aes(x = R0, y = p - 0.05),
data = filter(bifs, bif_type == "PD"),
colour = "grey90",
size = cex+0.5,
shape = 15) +
geom_point(aes(x = R0, y = p + 0.05),
data = filter(bifs, bif_type == "fold"),
colour = "grey90",
size = cex+0.5,
shape = 16) +
## intermediate and death PDs
geom_point(aes(x = R0, y = p - 0.05,
colour = as.numeric(as.character(period))),
data = filter(bifs,
(bif_type == "PD" & bif_pos != "birth")),
size = cex,
shape = 0) +
## birth PDs
geom_point(aes(x = R0, y = p - 0.05,
colour = as.numeric(as.character(period))),
data = filter(bifs,
(bif_type == "PD" & bif_pos == "birth")),
size = cex,
shape = 15) +
## intermediate and death folds
geom_point(aes(x = R0, y = p + 0.05,
colour = as.numeric(as.character(period))),
data = filter(bifs,
(bif_type == "fold" & bif_pos != "birth")),
size = cex,
shape = 1) +
## birth folds
geom_point(aes(x = R0, y = p + 0.05,
colour = as.numeric(as.character(period))),
data = filter(bifs,
(bif_type == "fold" & bif_pos == "birth")),
size = cex,
shape = 16) +
geom_vline(aes(xintercept = R0,
colour = as.numeric(as.character(period))),
data = filter(bifs,
(bif_pos == "birth" & p == -1)),
size = 0.25)
print(full_plot)
contour_plot <- ggplot(data, aes(x = R0, y = p,
col = t_per, fill = t_per)) +
geom_tile(width = 0.13) +
scale_colour_gradientn(colours = c(1:7, "grey10"),
name = "Period",
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max))) +
scale_fill_gradientn(colours = c(1:7, "grey"),
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max)),
guide = FALSE) +
scale_y_continuous(breaks = pvals) +
ggtitle(paste0("Transient periods for branch ", branch_num)) +
xlab("Basic Reproduction Number, $\\mathcal{R}_0$") +
ylab("Shape Parameter, $p$") +
xlim(xlim)
print(contour_plot)
contour_plot <- ggplot(data, aes(x = R0, y = p,
col = t_per, fill = t_per)) +
geom_tile(width = 0.13) +
scale_colour_gradientn(colours = c(1:7, "grey30"),
name = "Period",
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max))) +
scale_fill_gradientn(colours = c(1:7, "grey"),
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max)),
guide = FALSE) +
scale_y_continuous(breaks = pvals) +
ggtitle(paste0("Transient periods for branch ", branch_num)) +
xlab("Basic Reproduction Number, $\\mathcal{R}_0$") +
ylab("Shape Parameter, $p$") +
xlim(xlim)
print(contour_plot)
contour_plot <- ggplot(data, aes(x = R0, y = p,
col = t_per, fill = t_per)) +
geom_tile(width = 0.13) +
scale_colour_gradientn(colours = c(1:7, "grey50"),
name = "Period",
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max))) +
scale_fill_gradientn(colours = c(1:7, "grey"),
limits = c(1, scale_colour_max),
values = rescale(c(1:7, scale_colour_max)),
guide = FALSE) +
scale_y_continuous(breaks = pvals) +
ggtitle(paste0("Transient periods for branch ", branch_num)) +
xlab("Basic Reproduction Number, $\\mathcal{R}_0$") +
ylab("Shape Parameter, $p$") +
xlim(xlim)
print(contour_plot)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
summary(mtcars)
library(mtcars)
summary(mtcars)
setwd("~/git-repos/datasciencecoursera/course7-regressionmodels/proj")
system("open .")
system("touch proj.bib")
install.packages("RedditExtractoR")
library(RedditExtractoR)
example_attr = reddit_content(URL="https://www.reddit.com/r/news/top/?t=week")
head(example_attr)
example_attr
typeof(example_attr)
summary(example_attr)
system('oskim proj.pdf')
system('open -a Skim.app proj.pdf')
head(mtcars)
## Count number of cars in each category of auto or manual
mtcars %>%
count()
## Count number of cars in each category of auto or manual
mtcars %>%
count(am)
head(sample_sizes)
## Count number of cars in each category of auto or manual
sample_sizes <- mtcars %>%
count(am)
head(sample_sizes)
sample_sizes[which(am==0), n]
sample_sizes[which(sample_sizes$am==0), n]
with(sample_sizes, sample_sizes[which(am==0), "n"]
with(sample_sizes, sample_sizes[which(am==0), "n"])
filter(sample_sizes$n, am==0)
filter(sample_sizes, am==0)
filter(sample_sizes, am==0)$n
## Load libraries
library(tidyverse)
## Set knitr options
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
## Load libraries
library(tidyverse)
print(boxplot)
boxplot <- ggplot(mtcars, aes(x = am, y = mpg)) +
geom_boxplot() +
#scale_x_discrete(breaks = ) +
xlab("Transmission type") +
ylab("Fuel efficiency (miles per gallon)")
print(boxplot)
boxplot <- ggplot(mtcars, aes(y = mpg, group = am)) +
geom_boxplot() +
#scale_x_discrete(breaks = ) +
xlab("Transmission type") +
ylab("Fuel efficiency (miles per gallon)")
print(boxplot)
boxplot <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) +
geom_boxplot() +
#scale_x_discrete(breaks = ) +
xlab("Transmission type") +
ylab("Fuel efficiency (miles per gallon)")
print(boxplot)
boxplot <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) +
geom_boxplot() +
scale_x_discrete(breaks = c(0,1),
labels = c("Automatic", "Manual")) +
xlab("Transmission type") +
ylab("Fuel efficiency (miles per gallon)")
print(boxplot)
boxplot <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) +
geom_boxplot() +
theme(axis.ticks.x = element_blank()) +
scale_x_discrete(breaks = c(0,1),
labels = c("Automatic", "Manual")) +
xlab("Transmission type") +
ylab("Fuel efficiency (miles per gallon)")
print(boxplot)
boxplot <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) +
geom_boxplot() +
scale_x_discrete(breaks = c(0,1)) +
xlab("Transmission type") +
ylab("Fuel efficiency (miles per gallon)")
print(boxplot)
boxplot <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) +
geom_boxplot() +
scale_x_discrete() +
xlab("Transmission type") +
ylab("Fuel efficiency (miles per gallon)")
print(boxplot)
boxplot <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) +
geom_boxplot() +
scale_x_discrete(labels = c("Automatic", "Manual"),
breaks = c(0,1)) +
xlab("Transmission type") +
ylab("Fuel efficiency (miles per gallon)")
print(boxplot)
## Set knitr options
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, fig.width = 4, fig.height = 5)
## Load libraries
library(tidyverse)
boxplot <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) +
geom_boxplot() +
scale_x_discrete("Transmission type",
labels = c("0" = "Automatic", "1" = "Manual")) +
ylab("Fuel efficiency (miles per gallon)")
print(boxplot)
head(mtcars)
as_tibble(mtcars)
## Set knitr options
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, fig.width = 5, fig.height = 4)
## Load libraries
library(tidyverse)
mtcars$am <- as.factor(mt$cars)
mtcars$am <- as.factor(mtcars$am)
## Convert data to tibble and make factor variables where helpful
mtcars <- mtcars %>%
as_tibble()
mtcars$am <- as.factor(mtcars$am)
mtcars
boxplot <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) +
geom_boxplot() +
scale_x_discrete(labels = c("0" = "Automatic", "1" = "Manual")) +
ylab("Fuel efficiency (miles per gallon)")
print(boxplot)
boxplot <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) +
geom_boxplot() +
scale_x_discrete("Transmission type",
labels = c("0" = "Automatic", "1" = "Manual")) +
ylab("Fuel efficiency (miles per gallon)")
fit1 <- lm(mpg ~ am, data = mtcars)
plot(fit1)
## Generate summary of mpg for whole data set and then grouped by
## transmission type
summary(mtcars$mpg)
mtcars %>%
group_by(am) %>%
map(mpg, summary)
## Generate summary of mpg for whole data set and then grouped by
## transmission type
print("mpg (all cars):")
summary(mtcars$mpg)
print("mpg (automatic transmission)")
summary(filter(mtcars, am == 0)$mpg)
print("mpg (manual transmission)")
summary(filter(mtcars, am == 1)$mpg)
boxplot <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) +
geom_violin() +
scale_x_discrete("Transmission type",
labels = c("0" = "Automatic", "1" = "Manual")) +
ylab("Fuel efficiency (miles per gallon)")
print(boxplot)
boxplot <- ggplot(mtcars, aes(x = am, y = mpg, group = am)) +
geom_boxplot() +
scale_x_discrete("Transmission type",
labels = c("0" = "Automatic", "1" = "Manual")) +
ylab("Fuel efficiency (miles per gallon)")
print(boxplot)
## Compute the correlation matrix
corr_mat <- cor(mtcars)
## Compute the correlation matrix
mtcars
corr_mat <- cor(mtcars)
## Compute the correlation matrix
typeof(mtcars)
## Compute the correlation matrix
mtcars
## Compute the correlation matrix
mtcars$am <- as.numeric(as.character(mtcars$am))
corr_mat <- cor(mtcars)
head(corr_mat)
## Melt correlation matrix to plot
melt_corr_mat <- melt(corr_mat)
library(reshape2)
## Melt correlation matrix to plot
melt_corr_mat <- melt(corr_mat)
head(corr_mat)
head(melt_corr_mat)
## Plot heatmap
corr_heatmap <- ggplot(melt_corr_mat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
print(corr_heatmap)
## Plot heatmap
corr_heatmap <- ggplot(filter(melt_corr_mat, Var1 == "mpg"),
aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
print(corr_heatmap)
## Plot heatmap
corr_heatmap <- ggplot(filter(melt_corr_mat, Var1 == "mpg"),
aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
labs(x = 'Fuel efficiency (mpg)',
y = 'Covariates',
fill = 'Correlation')
print(corr_heatmap)
## Plot heatmap
corr_heatmap <- ggplot(filter(melt_corr_mat, Var1 == "mpg"),
aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
labs(x = 'Fuel efficiency',
y = 'Covariates',
fill = 'Correlation')
print(corr_heatmap)
summary(corr_mat)
corr_mat
corr_mat['mpg',]
order(corr_mat['mpg',])
sort(corr_mat['mpg',])
## Plot heatmap
corr_heatmap <- ggplot(filter(melt_corr_mat, Var1 == "mpg"),
aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_fill_gradientn(breaks = c(-1,0,1),
colours = c('deeppink1', 'grey80',
'forestgreen')) +
labs(x = 'Fuel efficiency',
y = 'Covariates',
fill = 'Correlation')
print(corr_heatmap)
## Plot heatmap
corr_heatmap <- ggplot(filter(melt_corr_mat, Var1 == "mpg"),
aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_fill_gradientn(breaks = c(-1,0,1),
colours = c('deeppink1', 'grey80',
'forestgreen'),
labels = c(-1,0,1)) +
labs(x = 'Fuel efficiency',
y = 'Covariates',
fill = 'Correlation')
print(corr_heatmap)
## Plot heatmap
corr_heatmap <- ggplot(filter(melt_corr_mat, Var1 == "mpg"),
aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_fill_gradientn(breaks = c(-1,0,1),
colours = c('hotpink1', 'grey80',
'forestgreen'),
labels = c(-1,0,1)) +
labs(x = 'Fuel efficiency',
y = 'Covariates',
fill = 'Correlation')
print(corr_heatmap)
```{r corr_vals}
sort(corr_mat['mpg',])
print('Correlation between fuel efficiency (mpg) and other variables:')
sort(corr_mat['mpg',])
print('Correlation between fuel efficiency (mpg) and other variables:')
sort(corr_mat['mpg',])
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("bookdown")
knit_with_parameters('~/git-repos/datasciencecoursera/course7-regressionmodels/proj/proj.Rmd')
