## Mac or PC? -- set git repo path
mac <- FALSE
if (mac){
git_path <- "~/git-repos/"
} else{
git_path <- "C:\\Users\\ip98\\Desktop\\git-repos\\"
}
## Utility function to convert mac path to PC
mac_to_pc <- function(path){
return(gsub("/", "\\\\", path))
}
data_filename <- "data/housing.csv"
data_fullpath <- paste0(git_path, data_filename)
data_filename <- "data/housing.csv"
if (!mac){
data_filename <- mac_to_pc(data_filename)
}
data_fullpath <- paste0(git_path, data_filename)
data_fullpath
housing <- read_csv(data_fullpath)
library(tidyverse)
housing <- read_csv(data_fullpath)
repo_path <- "datasciencecoursera/course9-dataproducts/proj/"
if (!mac){
repo_path <- mac_to_pc(repo_path)
}
data_fullpath <- paste0(git_path, repo_path, data_filename)
data_fullpath
housing <- read_csv(data_fullpath)
to_lower("TEST")
## Convert colnames to lowercase
colnames(housing) <- tolower(colnames(housing))
tolower("TEST")
colnames(housing)
colnames(housing) <- str_replace_all(colnames(x), " " = "_")
library(stringr)
colnames(housing) <- str_replace_all(colnames(x), " " = "_")
colnames(housing) <- str_replace_all(colnames(x), c(" " = "_"))
colnames(housing) <- str_replace_all(colnames(housing), c(" " = "_"))
colnames(housing) <- str_replace_all(colnames(housing), " " = "_")
colnames(housing) <- str_replace_all(colnames(housing), c(" " = "_"))
colnames(housing)
head(housing)
unique(housing$uon)
unique(housing$uom)
## Select only columns we are interested in and rename
housing <- housing %>%
mutate(ref_date = year)
library(tidyverse)
library(tidyverse)
head(housing)
data_filename <- "data/housing.csv"
if (!mac){
data_filename <- mac_to_pc(data_filename)
}
data_fullpath <- paste0(git_path, repo_path, data_filename)
housing <- read_csv(data_fullpath)
## Convert colnames to lowercase and replace spaces with underscores
colnames(housing) <- tolower(colnames(housing))
colnames(housing) <- str_replace_all(colnames(housing), c(" " = "_"))
colnames(housing)
housing <- read_csv(data_fullpath)
## Convert colnames to lowercase and replace spaces with underscores
colnames(housing) <- colnames(housing) %>%
tolower() %>%
str_replace_all(c(" " = "_"))
colnames(housing)
## Select only columns we are interested in and rename
housing <- housing %>%
mutate(ref_date = year)
## Select only columns we are interested in and rename
housing <- housing %>%
mutate(year = ref_date)
head(housing)
housing <- read_csv(data_fullpath)
## Convert colnames to lowercase and replace spaces with underscores
colnames(housing) <- colnames(housing) %>%
tolower() %>%
str_replace_all(c(" " = "_"))
## Select only columns we are interested in and rename
housing_sav <- housing
housing <- housing %>%
rename(year = ref_date)
head(housing)
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated)
## Select only columns we are interested in and rename
housing_sav <- housing
housing <- read_csv(data_fullpath)
## Convert colnames to lowercase and replace spaces with underscores
colnames(housing) <- colnames(housing) %>%
tolower() %>%
str_replace_all(c(" " = "_"))
## Rename certain columns and select only those we are interested in
housing_sav <- housing ## save dataframe before manipulating
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated)
head(housing)
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated) %>%
drop_na()
housing <- housing_sav ## recover saved dataframe
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated) %>%
drop_na()
head(housing)
housing <- housing_sav ## recover saved dataframe
housing <- housing_sav ## recover saved dataframe
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated) %>%
drop_na(avg_monthly_rent) ## drop observations with no avg monthly rent value
head(housing)
housing <- housing_sav ## recover saved dataframe
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated) %>%
drop_na(avg_monthly_rent) %>% ## drop observations with no avg monthly rent value
mutate_if(sapply(., is.character), as.factor)
head(housing)
unique(housing$type_of_structure)
levels(housing)
levels(housing$geo)
## Make plots of year vs value, with different colours for types of units, faceted by geographic location and type of structure
p <- ggplot(housing, aes(x = year, y = value, colour = type_of_unit)) +
geom_line()
print(p)
## Make plots of year vs value, with different colours for types of units, faceted by geographic location and type of structure
p <- ggplot(housing, aes(x = year, y = avg_monthly_rent, colour = type_of_unit)) +
geom_line()
print(p)
## Make plots of year vs value, with different colours for types of units, faceted by geographic location and type of structure
p <- ggplot(housing, aes(x = year, y = avg_monthly_rent, colour = type_of_unit)) +
geom_line() +
facet_grid(rows = geo, cols = type_of_structure)
colnames(housing)
## Make plots of year vs value, with different colours for types of units, faceted by geographic location and type of structure
p <- ggplot(housing, aes(x = year, y = avg_monthly_rent, colour = type_of_unit)) +
geom_line() +
facet_grid(rows = geo, cols = type_of_structure)
## Make plots of year vs value, with different colours for types of units, faceted by geographic location and type of structure
p <- ggplot(housing, aes(x = year, y = avg_monthly_rent, colour = type_of_unit)) +
geom_line() +
facet_grid(rows = vars(geo), cols = vars(type_of_structure))
print(p)
plot_housing <- housing %>%
filter(geo = select_geo)
plot_housing <- housing %>%
filter(geo == select_geo)
## Make plots of year vs value, with different colours for types of units, faceted by geographic location and type of structure
select_geo <- "Hamilton, Ontario"
plot_housing <- housing %>%
filter(geo == select_geo)
p <- ggplot(housing, aes(x = year, y = avg_monthly_rent)) +
geom_line() +
facet_grid(rows = vars(type_of_structure), cols = vars(type_of_unit))
print(p)
p <- ggplot(plot_housing, aes(x = year, y = avg_monthly_rent)) +
geom_line() +
facet_grid(rows = vars(type_of_structure), cols = vars(type_of_unit))
print(p)
housing <- housing_sav ## recover saved dataframe
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated) %>%
drop_na(avg_monthly_rent) %>% ## drop observations with no avg monthly rent value
mutate_if(sapply(., is.character), as.factor) %>% ## convert char cols to factors
fct_relevel(type_of_unit, "Two bedroom", after = 2)
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated) %>%
drop_na(avg_monthly_rent) %>% ## drop observations with no avg monthly rent value
mutate_if(sapply(., is.character), as.factor) %>% ## convert char cols to factors
fct_relevel(levels(type_of_unit), "Two bedroom", after = 2)
housing <- housing_sav ## recover saved dataframe
housing <- housing %>%
rename(avg_monthly_rent = value) %>%
drop_na(avg_monthly_rent) %>% ## drop observations with no avg monthly rent value
mutate(type_of_unit = fct_relevel(typo_of_unit, "Two bedroom", after = 2)
housing <- housing_sav ## recover saved dataframe
housing <- housing_sav ## recover saved dataframe
head(housing)
housing <- housing_sav ## recover saved dataframe
head(housing)
housing <- read_csv(data_fullpath)
## Convert colnames to lowercase and replace spaces with underscores
colnames(housing) <- colnames(housing) %>%
tolower() %>%
str_replace_all(c(" " = "_"))
## Rename certain columns and select only those we are interested in
housing_sav <- housing ## save dataframe before manipulating
housing <- housing %>%
rename(avg_monthly_rent = value) %>%
drop_na(avg_monthly_rent) %>% ## drop observations with no avg monthly rent value
mutate(type_of_unit = fct_relevel(typo_of_unit, "Two bedroom", after = 2)
NULL
head(housing)
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated) %>%
drop_na(avg_monthly_rent) %>% ## drop observations with no avg monthly rent value
mutate_if(sapply(., is.character), as.factor) %>% ## convert char cols to factors
mutate(type_of_unit = fct_relevel(typo_of_unit, "Two bedroom", after = 2)
)
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated) %>%
drop_na(avg_monthly_rent) %>% ## drop observations with no avg monthly rent value
mutate_if(sapply(., is.character), as.factor) %>% ## convert char cols to factors
mutate(type_of_unit = fct_relevel(type_of_unit, "Two bedroom", after = 2))
levels(housing$type_of_unit)
housing <- housing_sav ## recover saved dataframe
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated) %>%
drop_na(avg_monthly_rent) %>% ## drop observations with no avg monthly rent value
mutate_if(sapply(., is.character), as.factor) %>% ## convert char cols to factors
mutate(type_of_unit = fct_relevel(type_of_unit, "Two bedroom units", after = 2))
head(housing)
levels(housing$type_of_unit)
## Make plots of year vs value, with different colours for types of units, faceted by geographic location and type of structure
select_geo <- "Hamilton, Ontario"
plot_housing <- housing %>%
filter(geo == select_geo)
p <- ggplot(plot_housing, aes(x = year,
y = avg_monthly_rent,
colour = type_of_unit)) +
geom_line() +
facet_grid(rows = vars(type_of_structure)) +
title(paste0("Average monthly rents over time for ", select_geo))
p <- ggplot(plot_housing, aes(x = year,
y = avg_monthly_rent,
colour = type_of_unit)) +
geom_line() +
facet_grid(rows = vars(type_of_structure)) +
labs(main = paste0("Average monthly rents over time for ", select_geo))
print(p)
p <- ggplot(plot_housing, aes(x = year,
y = avg_monthly_rent,
colour = type_of_unit)) +
geom_line() +
facet_grid(rows = vars(type_of_structure)) +
labs(title = paste0("Average monthly rents over time for ", select_geo),
x = "Year",
y = "Average monthly rent",
legend = "Type of unit")
print(p)
p <- ggplot(plot_housing, aes(x = year,
y = avg_monthly_rent,
colour = type_of_unit)) +
geom_line() +
facet_grid(cols = vars(type_of_structure)) +
labs(title = paste0("Average monthly rents over time for ", select_geo),
x = "Year",
y = "Average monthly rent",
legend = "Type of unit")
print(p)
levels(housing$type_of_structure)
housing <- housing_sav ## recover saved dataframe
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated) %>%
drop_na(avg_monthly_rent) %>% ## drop observations with no avg monthly rent value
mutate_if(sapply(., is.character), as.factor) %>% ## convert char cols to factors
mutate(type_of_unit = fct_relevel(type_of_unit, "Two bedroom units", after = 2)) +
mutate(type_of_structure
= fct_recode(type_of_unit,
"Apartment structures of six units and over"
= "Apt structures of >5 units"))
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated) %>%
drop_na(avg_monthly_rent) %>% ## drop observations with no avg monthly rent value
mutate_if(sapply(., is.character), as.factor) %>% ## convert char cols to factors
mutate(type_of_unit = fct_relevel(type_of_unit, "Two bedroom units", after = 2)) +
mutate(type_of_structure
= fct_recode(type_of_structure,
"Apartment structures of six units and over"
= "Apt structures of >5 units"))
## Rename certain columns and select only those we are interested in
housing_sav <- housing ## save dataframe before manipulating
head(housing)
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated) %>%
drop_na(avg_monthly_rent) %>% ## drop observations with no avg monthly rent value
mutate_if(sapply(., is.character), as.factor) %>% ## convert char cols to factors
mutate(type_of_unit = fct_relevel(type_of_unit, "Two bedroom units", after = 2)) +
mutate(type_of_structure
= fct_recode(type_of_structure,
"Apartment structures of six units and over"
= "Apt structures of >5 units"))
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated) %>%
drop_na(avg_monthly_rent) %>% ## drop observations with no avg monthly rent value
mutate_if(sapply(., is.character), as.factor) %>% ## convert char cols to factors
mutate(type_of_unit = fct_relevel(type_of_unit, "Two bedroom units", after = 2)) +
mutate(type_of_structure
= fct_recode(vars(type_of_structure),
"Apartment structures of six units and over"
= "Apt structures of >5 units"))
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated) %>%
drop_na(avg_monthly_rent) %>% ## drop observations with no avg monthly rent value
mutate_if(sapply(., is.character), as.factor) %>% ## convert char cols to factors
mutate(type_of_unit = fct_relevel(type_of_unit, "Two bedroom units", after = 2)) +
mutate(type_of_structure
= fct_recode(vars(type_of_structure),
"Apartment structures of six units and over"
= "Apt structures of >5 units"))
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated) %>%
drop_na(avg_monthly_rent) %>% ## drop observations with no avg monthly rent value
mutate_if(sapply(., is.character), as.factor) %>% ## convert char cols to factors
mutate(type_of_unit = fct_relevel(type_of_unit, "Two bedroom units", after = 2)) %>%
mutate(type_of_structure
= fct_recode(type_of_structure,
"Apartment structures of six units and over"
= "Apt structures of >5 units"))
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated) %>%
drop_na(avg_monthly_rent) %>% ## drop observations with no avg monthly rent value
mutate_if(sapply(., is.character), as.factor) %>% ## convert char cols to factors
mutate(type_of_unit = fct_relevel(type_of_unit, "Two bedroom units", after = 2)) %>%
mutate(type_of_structure
= fct_recode(type_of_structure,
"Apt structures of >5 units"
= "Apartment structures of six units and over"))
housing <- housing_sav ## recover saved dataframe
housing <- housing %>%
rename(year = ref_date) %>%
rename(avg_monthly_rent = value) %>%
select(year, geo, type_of_structure, type_of_unit, avg_monthly_rent, terminated) %>%
drop_na(avg_monthly_rent) %>% ## drop observations with no avg monthly rent value
mutate_if(sapply(., is.character), as.factor) %>% ## convert char cols to factors
mutate(type_of_unit = fct_relevel(type_of_unit, "Two bedroom units", after = 2)) %>%
mutate(type_of_structure
= fct_recode(type_of_structure,
"Apt structures of >5 units"
= "Apartment structures of six units and over"))
head(housing)
levels(housing$type_of_structure)
housing <- housing_sav ## recover saved dataframe
facet_by_str <- TRUE
?plot.lm
