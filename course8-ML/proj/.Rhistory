system("touch proj.bib")
training <- read.csv("data/pml-training.csv")
testing <- read.csv("data/pml-testing.csv")
colnames(trainign)
colnames(training)
library(tidyverse)
?filter
## Filter training to remove rows with summary stats
## (none to predict in the test set so probably not relevant)
training <- training %>%
filter(new_window == "no")
## Get raw data
training <- read.csv("data/pml-training.csv")
## Filter training to remove rows with summary stats
## (none to predict in the test set so probably not relevant)
data <- training %>%
filter(new_window == "no")
## Filter training to remove rows with summary stats
## (none to predict in the test set so probably not relevant)
## Also remove cols with NA
data <- training %>%
filter(new_window == "no") %>%
na.omit()
## Filter training to remove rows with summary stats
## (none to predict in the test set so probably not relevant)
## Also remove cols with NA
data <- training %>%
filter(new_window == "no") %>%
map(~.x) %>%
discard(~all(is.na(.x))) %>%
map_df(~.x)
head(data)
## Get raw data
training <- read_csv("data/pml-training.csv")
## Filter training to remove rows with summary stats
## (none to predict in the test set so probably not relevant)
## Also remove cols with NA
data <- training %>%
filter(new_window == "no") %>%
map(~.x) %>%
discard(~all(is.na(.x))) %>%
map_df(~.x)
head(data)
## Training data
data <- training %>%
## Filter training to remove rows with summary stats
## (none to predict in the test set so probably not relevant)
filter(new_window == "no") %>%
## Remove cols where all vals are NA
map(~.x) %>%
discard(~all(is.na(.x))) %>%
map_df(~.x) %>%
## Remove cols irrelevant to prediction
select(-c(user_name,
raw_timestamp_part_1, raw_timestamp_part_2,
cvtd_timestamp,
new_window, num_window))
head(data)
## Training data
data <- training %>%
## Filter training to remove rows with summary stats
## (none to predict in the test set so probably not relevant)
filter(new_window == "no") %>%
## Remove cols where all vals are NA
map(~.x) %>%
discard(~all(is.na(.x))) %>%
map_df(~.x) %>%
## Remove cols irrelevant to prediction
select(-c(X1, user_name,
raw_timestamp_part_1, raw_timestamp_part_2,
cvtd_timestamp,
new_window, num_window))
head(data)
## Training data
training <- training %>%
## Filter training to remove rows with summary stats
## (none to predict in the test set so probably not relevant)
filter(new_window == "no") %>%
## Remove cols where all vals are NA
map(~.x) %>%
discard(~all(is.na(.x))) %>%
map_df(~.x) %>%
## Remove cols irrelevant to prediction
select(-c(X1, user_name,
raw_timestamp_part_1, raw_timestamp_part_2,
cvtd_timestamp,
new_window, num_window))
## Testing data
data <- testing %>%
)
## Testing data
data <- testing %>%
## Remove cols where all vals are NA
map(~.x) %>%
discard(~all(is.na(.x))) %>%
map_df(~.x) %>%
## Remove cols irrelevant to prediction
select(-c(X1, user_name,
raw_timestamp_part_1, raw_timestamp_part_2,
cvtd_timestamp,
new_window, num_window))
## Testing data
data <- testing %>%
## Remove cols where all vals are NA
map(~.x) %>%
discard(~all(is.na(.x))) %>%
map_df(~.x) %>%
## Remove cols irrelevant to prediction
select(-c(user_name,
raw_timestamp_part_1, raw_timestamp_part_2,
cvtd_timestamp,
new_window, num_window))
head(data)
testing <- read_csv("data/pml-testing.csv")
## Testing data
data <- testing %>%
## Remove cols where all vals are NA
map(~.x) %>%
discard(~all(is.na(.x))) %>%
map_df(~.x) %>%
## Remove cols irrelevant to prediction
select(-c(X1, user_name,
raw_timestamp_part_1, raw_timestamp_part_2,
cvtd_timestamp,
new_window, num_window))
## Testing data
testing <- testing %>%
## Remove cols where all vals are NA
map(~.x) %>%
discard(~all(is.na(.x))) %>%
map_df(~.x) %>%
## Remove cols irrelevant to prediction
select(-c(X1, user_name,
raw_timestamp_part_1, raw_timestamp_part_2,
cvtd_timestamp,
new_window, num_window))
colnames(training)
colnames(training) == colnames(testing)
colnames(testing)[-1]
head(testing["problem_id"])
colnames(testing)
library(tidyverse)
## Get raw data
training <- read_csv("data/pml-training.csv")
testing <- read_csv("data/pml-testing.csv")
## Training data
training <- training %>%
## Filter training to remove rows with summary stats
## (none to predict in the test set so probably not relevant)
filter(new_window == "no") %>%
## Remove cols where all vals are NA
map(~.x) %>%
discard(~all(is.na(.x))) %>%
map_df(~.x) %>%
## Remove cols irrelevant to prediction
select(-c(X1, user_name,
raw_timestamp_part_1, raw_timestamp_part_2,
cvtd_timestamp,
new_window, num_window))
## Testing data
testing <- testing %>%
## Remove cols where all vals are NA
map(~.x) %>%
discard(~all(is.na(.x))) %>%
map_df(~.x) %>%
## Remove cols irrelevant to prediction
select(-c(X1, user_name,
raw_timestamp_part_1, raw_timestamp_part_2,
cvtd_timestamp,
new_window, num_window))
## Load data
training <- read_csv("data/pml-training.csv")
## Training data
training <- training %>%
## Filter training to remove rows with summary stats
## (none to predict in the test set so probably not relevant)
filter(new_window == "no") %>%
## Remove cols where all vals are NA
map(~.x) %>%
discard(~all(is.na(.x))) %>%
map_df(~.x) %>%
## Remove cols irrelevant to prediction
select(-c(X1, user_name,
raw_timestamp_part_1, raw_timestamp_part_2,
cvtd_timestamp,
new_window, num_window))
library(tidyverse)
## Load data
training <- read_csv("data/pml-training.csv")
testing <- read_csv("data/pml-testing.csv")
## Load data
training <- read_csv("data/pml-training.csv")
## Training data
training <- training %>%
## Filter training to remove rows with summary stats
## (none to predict in the test set so probably not relevant)
filter(new_window == "no") %>%
## Remove cols where all vals are NA
map(~.x) %>%
discard(~all(is.na(.x))) %>%
map_df(~.x) %>%
## Remove cols irrelevant to prediction
select(-c(X1, user_name,
raw_timestamp_part_1, raw_timestamp_part_2,
cvtd_timestamp,
new_window, num_window))
training
## Testing data
testing <- testing %>%
## Remove cols where all vals are NA
map(~.x) %>%
discard(~all(is.na(.x))) %>%
map_df(~.x) %>%
## Remove cols irrelevant to prediction
select(-c(X1, user_name,
raw_timestamp_part_1, raw_timestamp_part_2,
cvtd_timestamp,
new_window, num_window))
head(training)
names(getModelInfo()).
names(getModelInfo())
library(caret)
names(getModelInfo()).
names(getModelInfo())
library(randomForest)
?rfcv
